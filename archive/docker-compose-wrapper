#!/bin/bash

bold=$(tput bold)
normal=$(tput sgr0)

declare -A allowed_env=( 
 [prod]=1  [uat]=1  [dev]=1
)

function valid_ip {

  local  ip=$1

  if expr "$ip" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
    IFS=.
    set $ip
    for quad in 1 2 3 4; do
      if eval [ \$$quad -gt 255 ]; then
        return 0
      fi
    done
    return 1
  else
    return 0
  fi
}
APP_KEY=$1
ENVIRONMENT=$2

[ -z "$ENVIRONMENT" ] && echo "No docker-compose command?" && exit;

if [ ! -n "${allowed_env[$ENVIRONMENT]}" ]; then
	ENVIRONMENT="dev"
	shift
else
	shift; shift
fi

[ -z "$@" ] && echo "No docker-compose command?" && exit;

[ ! -f ../../builds/$APP_KEY-$ENVIRONMENT/.env ] && echo "no .env file found at ../../builds/$APP_KEY-$ENVIRONMENT/" && exit;

echo "Reading from ../../builds/$APP_KEY-$ENVIRONMENT/.env"
export $(egrep -v '^#' ../../builds/$APP_KEY-$ENVIRONMENT/.env | xargs)

# Temporarily put a copy of the .env file somewhere that terraform can reference it without relative rigmarole
cp ../../builds/$APP_KEY-$ENVIRONMENT/.env ./

sed -i "s/^EXTERNAL_HOSTNAME=$/EXTERNAL_HOSTNAME=$EXTERNAL_HOSTNAME/" ./.env

# Do we have an IP (will need self-signed certs) or a domain (can use certbot)
# Or do we wish to force our own domains (dev, uat, etc)

valid_ip $EXTERNAL_HOSTNAME
HOSTNAME_IS_IP=$?
# Export the flag (may need copied t .env for proper builds)
export HOSTNAME_IS_IP=$HOSTNAME_IS_IP

if [ -z "$EXTERNAL_HOSTNAME" ]; then
  export EXTERNAL_HOSTNAME=$APP_KEY-$ENVIRONMENT.leaf.cosector.com
fi

echo "hostname: $EXTERNAL_HOSTNAME (ip? $HOSTNAME_IS_IP)"

echo "Running docker-compose $@"
exec docker-compose $@

# I don't think we ever make it here..?
echo "post build .env rm"
# Remove the temporary local .env file when done
rm ./.env
