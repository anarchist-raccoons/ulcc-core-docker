#!/bin/bash

red="\033[0;31m"
green="\033[0;32m"
normal="\033[0m"
bold="\033[1m"

print_ok="[${green}OK${normal}]"
print_fail="[${red}FAIL${normal}]"


declare -A allowed_env=( 
 [prod]=1  [uat]=1  [dev]=1 [train]=1 [demo]=1
)

declare -A allowed_action=( 
 [status]=1 [start]=1  [stop]=1
)

APP_KEY=$1
ENVIRONMENT=$2


[ -z "$ENVIRONMENT" ] && echo "No action (start|stop)?" && exit;

# Allow default to dev
if [ ! -n "${allowed_env[$ENVIRONMENT]}" ]; then
    ENVIRONMENT="dev"
    ACTION=$2
    YES=$3
else
    ACTION=$3
    YES=$4
fi

[ ! -n "${allowed_action[$ACTION]}" ] && echo "Unrecognised action $ACTION" && exit;

# TODO this will need updated to use variable read from terraform or vne to get correct subscription for tenant
Subscription="Research Tech 1"

ClusterName="leaf-$ENVIRONMENT-$APP_KEY"
WebHost="$APP_KEY-$ENVIRONMENT.leaf.cosector.com"
echo "Check for $ClusterName ($WebHost)"

cluster_exists=`/usr/local/bin/kubectl config get-clusters | grep $ClusterName`
if [ -z "$cluster_exists" ]; then
   echo -e "Cluster ${bold}$ClusterName${normal} ${red}NOT found${normal}, resetting kubectl config and renewing az aks credentials..."
   # We will remove the kubectl config as it occaisionally gets corrupted. Removing and repopulating with `az aks get-credentials...` is best bet I think
   rm -f /home/ec2-user/.kube/config
   az aks get-credentials --resource-group $ClusterName --name $ClusterName --overwrite-existing --subscription $Subscription
   # Check again...
   cluster_exists=`/usr/local/bin/kubectl config get-clusters | grep $ClusterName`
   if [ -z "$cluster_exists" ]; then
     echo "Sorry cluster $ClusterName NOT found, exiting"
     exit
   fi
fi

echo -e "Cluster ${bold}$ClusterName${normal} ${green}exists${normal}"

/usr/local/bin/kubectl config use-context $ClusterName
ResourceGroup=$ClusterName
# TODO make Location dynamic?
Location="northeurope"

vmssResourceGroup="MC_${ResourceGroup}_${ClusterName}_${Location}"

# List all VM scale sets... we only have one at mo so... (TODO split and loop)
vmssNameFull=$(/usr/bin/az vmss list --resource-group $vmssResourceGroup --query "[].id" -o tsv)
vmssName="${vmssNameFull##/*/}"

function status {
    if [ $(/usr/local/bin/kubectl get deployment --no-headers eprints | awk '{print $4}') == "1" ]; then
        echo -e "Cluster ${bold}$ClusterName${normal} is ${green}${bold}UP${normal} and EPrints deployment ${green}${bold}is available${normal}"
        echo "Checking site https://$WebHost..."
        WebResponse=$(curl -Is https://lbs-train.leaf.cosector.com | head -1 )
        if [ -z "$WebResponse" ]; then
            echo -e "$WebHost is currently ${red}DOWN${normal} or not up yet"
        else
            echo "$WebResponse" | grep -P -q '200' # TODO accept other codes?
            if [ $? == 0 ]; then
               echo -e "$WebHost is currently ${green}UP${normal} -> ${green}$WebResponse${normal}"
            else
               echo -e "$WebHost is currently ${green}UP${normal} but returned ${red}$WebResponse${normal}"
            fi
        fi
        return 1
    else
        echo -e "Cluster ${bold}$ClusterName${normal} is ${red}${bold}DOWN${normal} and EPrints deployment ${red}${bold}is not available${normal}"
        return 0
    fi
}

function stop {
    status
    [ $? == "0" ] && echo "Not stopping cluster is already down" && return;
    echo -e "We will now ${bold}$ACTION${normal} (deallocate) VM Scale Set $vmssName in Resource Group $vmssResourceGroup"
    if [ "$YES" == "yes" ]; then
       /usr/bin/az vmss deallocate --resource-group $vmssResourceGroup --name $vmssName
    else
      while true; do
        read -p "OK?" yn
        case $yn in
            [Yy]* ) /usr/bin/az vmss deallocate --resource-group $vmssResourceGroup --name $vmssName; break;;
            [Nn]* ) exit;;
            * ) echo "Please answer yes or no.";;
        esac
      done
    fi
}

function start {
    status
    [ $? == "1" ] && echo "Not starting cluster is already up" && return;
    echo -e "We will now ${bold}$ACTION${normal} VM Scale Set $vmssName in Resource Group $vmssResourceGroup"
    if [ "$YES" == "yes" ]; then
       /usr/bin/az vmss start --resource-group $vmssResourceGroup --name $vmssName
    else
      while true; do
        read -p "OK?" yn
        case $yn in
            [Yy]* ) /usr/bin/az vmss start --resource-group $vmssResourceGroup --name $vmssName; break;;
            [Nn]* ) exit;;
            * ) echo "Please answer yes or no.";;
        esac
      done
    fi
}

$ACTION

